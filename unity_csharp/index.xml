<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unity和C# on Lijinyu&#39;s Hugo blog</title>
    <link>https://206031.xyz/unity_csharp/</link>
    <description>Recent content in Unity和C# on Lijinyu&#39;s Hugo blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Feb 2021 22:13:51 +0800</lastBuildDate><atom:link href="https://206031.xyz/unity_csharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unity03_2DActualCombat</title>
      <link>https://206031.xyz/unity_csharp/unity03/</link>
      <pubDate>Mon, 17 Feb 2020 00:06:34 +0800</pubDate>
      
      <guid>https://206031.xyz/unity_csharp/unity03/</guid>
      <description>1.	Starting 2D背景色可以点击MainCamera的Background进行修改。</description>
    </item>
    
    <item>
      <title>Unity02_3DActualCombat</title>
      <link>https://206031.xyz/unity_csharp/unity02/</link>
      <pubDate>Fri, 14 Feb 2020 21:16:36 +0800</pubDate>
      
      <guid>https://206031.xyz/unity_csharp/unity02/</guid>
      <description>1.	About Unity Unity可以跨平台，且免去了造轮子等底层的开发。
2.	About Project 2.1	File Structure   Assets
用于存放游戏开发的一些资源：picture、model、voice、code。
  Library
库，用于存放一些内置的script。
  ProjectSetting
存放工程的设置。
  Temp
临时文件。
  Project-&amp;gt;Scene-&amp;gt;GameObject-&amp;gt;Component
2.2	Windows Structure 共有三个区域，五个窗口。
 左区域  有scene窗口与Game窗口。
scene窗口就是游戏的场景，Game窗口就是游戏运行的效果。
 中部区域  Project：本项目文件下Assets下的文件，也就是项目的资源。
Hierachy /&amp;lsquo;haɪərɑːrki/：显示当前场景层次，也就是有哪些东西。
 右区域  Inspector：查看当前物体属性的检视面板，可以说是属性展示面板。
2.3	About Scene 2.3.1	How to create File-&amp;gt;New Scene
要注意保存，未保存的都是Untitled。
2.3.2	Move perspective 按住右键可以以自己为中心旋转；按住Alt加上右键可以调整远近，按住Alt+左键可以以聚焦物体为中心旋转；在Hierarchy里点击Object可以focus on，或scene里点击它按F。按住滚轮键可以平移视野。
右上角点击Perspective可以切换到透视视图，Iso则是正常视图。
最上方的第一个是与鼠标中间一样，第二个是默认，第三个是调整角度，第四个是调整大小和位置。快捷键分别是QWERTY。
然后的Global与Local的切换是用于坐标系切换，是绝对坐标系还是相对坐标系。
2.3.3	Camera 相机是没有实体的，图标可以调节大小。在Gizmos里面的iron。
2.4	About Hierarchy 层级面板，里面展示了游戏的Object。可以进行拖动把某一Object拖动到另一个下面，使其成为父子关系。父亲移动时，儿子会跟着移动，反之则不会。</description>
    </item>
    
    <item>
      <title>Unity01_C#InUnity</title>
      <link>https://206031.xyz/unity_csharp/unity01/</link>
      <pubDate>Fri, 14 Feb 2020 01:55:14 +0800</pubDate>
      
      <guid>https://206031.xyz/unity_csharp/unity01/</guid>
      <description>一、关于脚本 可以在Project直接create一个script，也可以在某个object上面add component时，选择create new script。
具体可以看unity里的一些选项进行自由选择。
二、关于namespace namespace也就是命名空间
类似于C语言的头文件，如果使用哪个命名空间的类，但是没有声明using namespace，就会报错。
也可以自己声明创建一个namespace。
namespace example{ class dick{ ... } } 如果想要使用dick类，就必须声明using example。
三、关于inspector inspector是unity内用于监视游戏物体的区域。通过inspector可以直接访问到game object内的public variable。
如果通过inspector修改了variable的初始值，那么以inspector为准。如果在C#内没有定义初值，也可以在inspector里赋值。
四、删除游戏物体 Transform[] children = transform.GetComponentsInChildren&amp;lt;Transform&amp;gt;(); for...{ GameObject.Destory(children[i].gameObject); } 即可删除，但在获取物体时也会获取它自身，如果不想删除自己，只需要判断一下children[i]!=transform。
五、foreach循环 专门用于遍历的循环。
 foreach(Class name in variable){
do&amp;hellip;
}
 代表每一次赋值variable内的一个变量给name。
六、component  获取  使用GetComponent/s来获取，也可以获取别的object的component，只需要声明一个该类型的object，然后进行拖拽赋值过来，即可使用object.GetComponent进行获取。
s取决于是全部获取还是只获取第一个component。
 禁用  只需要声明该组件并引用，然后component.enable=false。即可禁用组件。
 调用  同理，如果是同一object上的component，可以直接使用component.method()进行调用。无视是否禁用。
七、GameObject 只有获取到GameObject，才能对其的property进行操作。
7.1	Access GameObject 1.可以声明该Class的Object，然后在unity内进行拖拽赋值。
2.也可以通过transform.Find(&amp;ldquo;string&amp;rdquo;)这种查找字符串的方法，直接进行路径字符串查找，且这种效率会更高。当路径不存在时，会返回NULL。
3.通过GameObject.Find(&amp;ldquo;string&amp;rdquo;)方法，直接查找Object的名字。
并不推荐第三种，遍历各种物体，很慢。
4.可以使用标签。使用GameObject.FindWithTag(&amp;ldquo;str&amp;rdquo;)。</description>
    </item>
    
    <item>
      <title>Unity00_C#InUnity</title>
      <link>https://206031.xyz/unity_csharp/unity00/</link>
      <pubDate>Wed, 12 Feb 2020 23:13:50 +0800</pubDate>
      
      <guid>https://206031.xyz/unity_csharp/unity00/</guid>
      <description>一、关于控制台输出 控制台输出调试时，有两种方法。
 使用print()函数进行输出 使用Debug.Log()函数进行输出  输出的内容在Windows-&amp;gt;General-&amp;gt;Console(控制台)。print输出只能在组件里，非组件的情况需要第二种，第二种也是无限制的输出方式。
进一步，还有警告与错误输出。
Debug.LogWarning()、Debug.LogError()分别输出这两种情况。
Ctrl+K或C可以快捷注释化。
二、数据类型 Sbyte是C中的byte，byte是C中的unsignedbyte。
unsigned在C#是u。
整型
  sbyte
-128~127
byte是它的unsigned
  short
-32768~32767
ushort
  int
-2147483648~2147483647
uint
  long
挺长的反正
ulong
  浮点
  float
赋值时注意+f
  double
最常用的
  布尔
 bool  字符
  char
单字符
  string
字符串
  枚举类型enum enm
定义方法：
enum 枚举{
​	name1,
​	name2,</description>
    </item>
    
    <item>
      <title>C#_04</title>
      <link>https://206031.xyz/unity_csharp/csharp_04/</link>
      <pubDate>Sun, 09 Feb 2020 20:48:52 +0800</pubDate>
      
      <guid>https://206031.xyz/unity_csharp/csharp_04/</guid>
      <description>[TOC]
 一、什么是算法Algorithm 计算机中的算法，主要指为了解决某个问题而设计的一套解决方案，包容一系列计算机能够执行的有着特定循序的命令，计算机执行完这些命令就会得到某种结果，从而意味着问题已经有了一个结论。
算法的针对性很强，专用于解决特定的问题。
算法的设计，通常与数学有着很密切的联系，并且是独立于特定的编程语言或软件平台的。也就是可以使用多种编程语言以多种方式来实现同一种算法。
二、需求分析 在解决某一个问题时，首先思考这个问题的解决难度，需要的专业背景知识。其次这个问题是否有必要使用计算机来解决，计算量是否大与是否方便。
三、结构化编程 3.1 概念 程序可以被看成一种“抽象”的艺术。使用抽象的思维方式，构造软件系统的顶层模型。
可以将一个程序看做是一个黑盒子，将一些数据输入进黑盒子，然后就可以从黑盒子中输出一些数据。因此，程序的核心实际上就是程序的输入输出与其中的算法。也就有了程序=数据结构+算法。(这句话出自Niklaus Wirth，Pascal语言之父，提出了结构化程序设计的概念)
3.2 数据结构 数据结构实际上就是对数据的一种抽象处理。算法也是基于数据结构进行设计。
比如某个问题要处理与年月日相关的数据，为了方便就可以抽象出一种数据结构为“日期”，含义年、月、日三个基本信息。
数据结构设计是程序开发设计的关键，而数据结构设计的关键，就在于要依据待解决的问题，分析它涉及到的数据与蕴含的各种信息，按照当前语言的所支持的语法特性，将它们抽象为一种数据结构。
3.3 算法 如上文，算法要基于数据结构设计。
一般地，可以将人的计算方法思想使用计算机语言实现，也就是转化为计算机算法。将人脑的想法条理化，转化为计算机的思想：一系列命令，通过执行这些命令，完成对输入数据处理后输出。
3.4 设计 在设计过程中，应自顶向下，由粗略到详细，先模糊在构思细节这样进行设计。因为没有粗略，也无法构思详细，就如同画画，只有先把框架搭起来，才能不断完善其细节。如果一上来就构思细节，构思不起来，也不能完成和整体的配合。
3.5 开发 而在开发过程中，应恰恰相反，从下层到上层，自底向上的，像搭积木一样去编写程序，先把最底层的积木写好，再不断在积木上搭建房间，再通过房间达成一座高楼。
编程中，就是先编写最底层的函数，把轮子写出来，在编写中间层函数，它需要调用底层函数。完成底板的开发。最终开发顶层函数，它调用中间层函数，而不应该去调用最底层函数，因为方便后期维护。这样在底板的基础上，搭建出一台汽车。
同样的，底层函数更不应去反过来去调用顶层或中层函数。这样在后期维护，就不会牵一发而动全身。
在VS2019中，首先编写一个.cs文件封装数据结构，然后在一个.cs中按照上述规则编写程序，最终实现了程序的开发。</description>
    </item>
    
    <item>
      <title>C#_03</title>
      <link>https://206031.xyz/unity_csharp/csharp_03/</link>
      <pubDate>Sun, 09 Feb 2020 00:05:53 +0800</pubDate>
      
      <guid>https://206031.xyz/unity_csharp/csharp_03/</guid>
      <description>[TOC]
 一、C#程序的编写、编译、运行。   打开记事本，编写程序，完成后保存为.cs后缀的文件。(标准编码方式为ASCII)
  打开Developer Command Prompt for VS 2019(开发人员命令提示符)，找到源代码的目录。
 C:可以切换到某盘
dir *.*可以展示当前目录下指定文件
   使用指令
 csc.exe /target:exe XXX.cs
进行编译
type xx.cs
进行查看源代码
   二、编译 编译就将纯文本形式的源代码(HelloWorld.cs)通过编译器Compiler进行翻译，转换成二进制的可执行程序。(.exe)
三、可执行程序 在Windows平台下，可执行程序分为托管程序(C#，运行需要计算机安装有.NET Framework)与非托管程序(C/C++)两种。
3.1 托管程序 .NET程序就是托管(Managed)程序，它必须运行在一个独立的运行环境(CLR=common language runtime=公共语言运行库)，并受到这个环境的管理和控制。就是一台只运行.NET程序的虚拟机(VIrtual Machine)。
.NET应用程序	&amp;lt;&amp;ndash;管理&amp;ndash;	.NET虚拟机(CLR)	&amp;ndash;调用功能&amp;ndash;&amp;gt;	操作系统(Windows)	&amp;ndash;管理&amp;ndash;&amp;gt;	构成计算机的各种硬件
四、.NET程序开发运行全景图 .exe和.dll在.NET中统称为&amp;quot;程序集Assembly&amp;quot;，其中保存的是&amp;quot;IL(中间语言)&amp;ldquo;指令。
IL指令交给CLR也就是.NET虚拟机，首先通过类装载器读入IL指令，其次通过JIT编译器进行安全检查，如果通过了检查，就进行编译，这时就生成了本地可以由CPU直接执行的代码，叫作本地代码。最终由CPU执行。</description>
    </item>
    
    <item>
      <title>C#_02</title>
      <link>https://206031.xyz/unity_csharp/csharp_02/</link>
      <pubDate>Sat, 08 Feb 2020 02:00:46 +0800</pubDate>
      
      <guid>https://206031.xyz/unity_csharp/csharp_02/</guid>
      <description>[TOC]
 一、面向对象程序设计思想  面向对象是一种主流的软件开发与设计方法 当前人们使用的各种软件系统基本都是应用面向对象思想与技术设计和开发出来的 颗粒度加大，开发更容易  二、背景知识 2.1 软件是怎么写出来的？ 面临的问题以及解决方法：
  如何表达信息，从而方便计算机的处理？
答：设计和选用合适的数据结构。
  如何设计与选择特定的算法取处理数据与信息？
答：可选择已有的or设计新的。
算法：分而治之、动态规划。
程序控制结构：分支、循环、递归。
  如何编写程序实现算法？
答：选择合适的技术手段，设计合理的技术方案。
软件系统架构、面向对象的分析与设计、编程语言、开发框架、软件平台等等。
  2.2 程序是如何被计算机执行的  各种信息是如何用0-1表达的 计算机由哪些原件构成，其工作原理是什么 操作系统如何启动一个程序的执行  2.3 如何编写计算机可以执行的程序  编写源代码 编译 得到可运行的  2.4 怎样构造解决问题的算法  分析问题 设计算法 编写程序  三、0和1 3.1 原因 人类使用十进制0~9进行计算，计算机只只使用2个数字0和1。因为两个状态的东西容易找到和制作：开关、黑白、有无。
在计算机中，只需要让高电平表示&amp;quot;1&amp;quot;，低电平表示&amp;quot;0&amp;quot;，这样计算机元件的制造难度就可以大大下降。相反，如果使用十进制，就需要找到一种区分10种状态的电子元器件，很难。
3.2 如何表达信息 数值信息直接转换到二进制表达。
 10 -&amp;gt; 1010
 非数值信息，采用编码。
 编码就是以若干位二进制码的不同组合来表示非数值类型的信息。具体怎么组合是人为指定的。
  五笔字型的汉字输入法，使用1~4个字符对应一个或多个汉字。 数码图像，可以将其分解成一个一个的像素点，用数字表达它的颜色和位置等信息，然后再把这些数字以特定格式存进文件里，就是图像文件。  3.</description>
    </item>
    
    <item>
      <title>C#_01</title>
      <link>https://206031.xyz/unity_csharp/csharp_01/</link>
      <pubDate>Fri, 07 Feb 2020 19:13:27 +0800</pubDate>
      
      <guid>https://206031.xyz/unity_csharp/csharp_01/</guid>
      <description>金旭亮老师的C#+.NET的学习笔记
[TOC]
 一、ReadKey与Beep  ReadKey(true)
 可以使用户输入一个字符。当参数为true时，用户的输入会隐藏。
 Beep()
 会使计算机发出一次响声。
二、C#编程规则  标识符（identifier：程序中含有特殊含有的单词，区分大小写） 每句话以分号结尾，多条语句可以用{}合在一起成为语句块。 编写的代码放在类Class中，类是C#的基本单元。 存放C# class的源代码文件拓展名为.cs，一个.cs可以包含多个class。  三、文件组织方式 一个解决方案包Solution含了3个项目Project。
Project是Visual Studio编译的最小单元。
Solution可以包含多个Project。其中加粗的Project是启动项目。
一个Project可以有多个类文件class，class只有在Project中才能被编译。
程序的入口点是Program类的Main()方法</description>
    </item>
    
    <item>
      <title>C#_00</title>
      <link>https://206031.xyz/unity_csharp/csharp_00/</link>
      <pubDate>Fri, 07 Feb 2020 00:11:18 +0800</pubDate>
      
      <guid>https://206031.xyz/unity_csharp/csharp_00/</guid>
      <description>金旭亮老师的C#+.NET的学习笔记
[TOC]
 一、本课程学习内容：C# .NET 本课程将会用到的项目类型：
 Windows窗体程序（.exe 最常用的） 控制台应用程序（多用于学习，平时少） 类库（.dll 提供大厦的砖块）  二、格式输入输出 Console类(控制台 [kənˈsəʊl , ˈkɒnsəʊl])
 格式输入：Console.WriteLine();
格式输出：Console.ReadKey();
 三、控制台方法 与Java一样，静态无返回值的方法就是
static void TestConsoleProperty(){ Console.Title = &amp;#34;Current Time:&amp;#34;+DateTime.Now; Console.ForegroundColor = ConsoleColor.Yellow; Console.BackgroundColor = ConsoleColor.DarkBlue; } 引用方法时的语法是
 TestConsoleProperty();
 其中Console类中的Title、ForegroundColor、BackgroundColor分别是标题、前背景色（字体颜色）、背景色这些属性。
四、输入输出及其参数 Console.Write()方法并不会自动换行，类似于Java的System.out.print()，而WriteLine()就像是println()。
在输出时，涉及到字符串变量与字符串，有两种方法。
  like Java&amp;rsquo;s format:by using the character &amp;lsquo;+&amp;rsquo; to connect a string and a variable.
 Console.WriteLine(&amp;ldquo;Like Java&amp;rdquo;+string);
   like C&amp;rsquo;s format:通过类似于{数字}的占位符以及后面跟着的参数进行输出。占位符里的数字代表后面的第几个参数。</description>
    </item>
    
  </channel>
</rss>
