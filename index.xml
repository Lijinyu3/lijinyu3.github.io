<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Myblog on Lijinyu&#39;s Hugo blog</title>
    <link>https://lijinyu3.github.io/</link>
    <description>Recent content in Myblog on Lijinyu&#39;s Hugo blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Aug 2019 00:32:24 +0800</lastBuildDate>
    
	<atom:link href="https://lijinyu3.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Unity02_UnityActualCombat</title>
      <link>https://lijinyu3.github.io/unity/unity02/</link>
      <pubDate>Fri, 14 Feb 2020 21:16:36 +0800</pubDate>
      
      <guid>https://lijinyu3.github.io/unity/unity02/</guid>
      <description>一、About Unity Unity可以跨平台，且免去了造轮子等底层的开发。</description>
    </item>
    
    <item>
      <title>Unity01_C#InUnity</title>
      <link>https://lijinyu3.github.io/unity/unity01/</link>
      <pubDate>Fri, 14 Feb 2020 01:55:14 +0800</pubDate>
      
      <guid>https://lijinyu3.github.io/unity/unity01/</guid>
      <description>一、关于脚本 可以在Project直接create一个script，也可以在某个object上面add component时，选择create new script。
具体可以看unity里的一些选项进行自由选择。
二、关于namespace namespace也就是命名空间
类似于C语言的头文件，如果使用哪个命名空间的类，但是没有声明using namespace，就会报错。
也可以自己声明创建一个namespace。
namespace example{ class dick{ ... } } 如果想要使用dick类，就必须声明using example。
三、关于inspector inspector是unity内用于监视游戏物体的区域。通过inspector可以直接访问到game object内的public variable。
如果通过inspector修改了variable的初始值，那么以inspector为准。如果在C#内没有定义初值，也可以在inspector里赋值。
四、删除游戏物体 Transform[] children = transform.GetComponentsInChildren&amp;lt;Transform&amp;gt;(); for...{ GameObject.Destory(children[i].gameObject); } 即可删除，但在获取物体时也会获取它自身，如果不想删除自己，只需要判断一下children[i]!=transform。
五、foreach循环 专门用于遍历的循环。
 foreach(Class name in variable){
do&amp;hellip;
}
 代表每一次赋值variable内的一个变量给name。
六、component  获取  使用GetComponent/s来获取，也可以获取别的object的component，只需要声明一个该类型的object，然后进行拖拽赋值过来，即可使用object.GetComponent进行获取。
s取决于是全部获取还是只获取第一个component。
 禁用  只需要声明该组件并引用，然后component.enable=false。即可禁用组件。
 调用  同理，如果是同一object上的component，可以直接使用component.method()进行调用。无视是否禁用。
七、GameObject 只有获取到GameObject，才能对其的property进行操作。
7.1	Access GameObject 1.可以声明该Class的Object，然后在unity内进行拖拽赋值。
2.也可以通过transform.Find(&amp;ldquo;string&amp;rdquo;)这种查找字符串的方法，直接进行路径字符串查找，且这种效率会更高。当路径不存在时，会返回NULL。
3.通过GameObject.Find(&amp;ldquo;string&amp;rdquo;)方法，直接查找Object的名字。
并不推荐第三种，遍历各种物体，很慢。
4.可以使用标签。使用GameObject.FindWithTag(&amp;ldquo;str&amp;rdquo;)。</description>
    </item>
    
    <item>
      <title>Unity00_C#InUnity</title>
      <link>https://lijinyu3.github.io/unity/unity00/</link>
      <pubDate>Wed, 12 Feb 2020 23:13:50 +0800</pubDate>
      
      <guid>https://lijinyu3.github.io/unity/unity00/</guid>
      <description>一、关于控制台输出 控制台输出调试时，有两种方法。
 使用print()函数进行输出 使用Debug.Log()函数进行输出  输出的内容在Windows-&amp;gt;General-&amp;gt;Console(控制台)。print输出只能在组件里，非组件的情况需要第二种，第二种也是无限制的输出方式。
进一步，还有警告与错误输出。
Debug.LogWarning()、Debug.LogError()分别输出这两种情况。
Ctrl+K或C可以快捷注释化。
二、数据类型 Sbyte是C中的byte，byte是C中的unsignedbyte。
unsigned在C#是u。
整型
  sbyte
-128~127
byte是它的unsigned
  short
-32768~32767
ushort
  int
-2147483648~2147483647
uint
  long
挺长的反正
ulong
  浮点
  float
赋值时注意+f
  double
最常用的
  布尔
 bool  字符
  char
单字符
  string
字符串
  枚举类型enum enm
定义方法：
enum 枚举{
​	name1,
​	name2,</description>
    </item>
    
    <item>
      <title>C#_04</title>
      <link>https://lijinyu3.github.io/studynotes/csharp_04/</link>
      <pubDate>Sun, 09 Feb 2020 20:48:52 +0800</pubDate>
      
      <guid>https://lijinyu3.github.io/studynotes/csharp_04/</guid>
      <description>[TOC]
 一、什么是算法Algorithm 计算机中的算法，主要指为了解决某个问题而设计的一套解决方案，包容一系列计算机能够执行的有着特定循序的命令，计算机执行完这些命令就会得到某种结果，从而意味着问题已经有了一个结论。
算法的针对性很强，专用于解决特定的问题。
算法的设计，通常与数学有着很密切的联系，并且是独立于特定的编程语言或软件平台的。也就是可以使用多种编程语言以多种方式来实现同一种算法。
二、需求分析 在解决某一个问题时，首先思考这个问题的解决难度，需要的专业背景知识。其次这个问题是否有必要使用计算机来解决，计算量是否大与是否方便。
三、结构化编程 3.1 概念 程序可以被看成一种“抽象”的艺术。使用抽象的思维方式，构造软件系统的顶层模型。
可以将一个程序看做是一个黑盒子，将一些数据输入进黑盒子，然后就可以从黑盒子中输出一些数据。因此，程序的核心实际上就是程序的输入输出与其中的算法。也就有了程序=数据结构+算法。(这句话出自Niklaus Wirth，Pascal语言之父，提出了结构化程序设计的概念)
3.2 数据结构 数据结构实际上就是对数据的一种抽象处理。算法也是基于数据结构进行设计。
比如某个问题要处理与年月日相关的数据，为了方便就可以抽象出一种数据结构为“日期”，含义年、月、日三个基本信息。
数据结构设计是程序开发设计的关键，而数据结构设计的关键，就在于要依据待解决的问题，分析它涉及到的数据与蕴含的各种信息，按照当前语言的所支持的语法特性，将它们抽象为一种数据结构。
3.3 算法 如上文，算法要基于数据结构设计。
一般地，可以将人的计算方法思想使用计算机语言实现，也就是转化为计算机算法。将人脑的想法条理化，转化为计算机的思想：一系列命令，通过执行这些命令，完成对输入数据处理后输出。
3.4 设计 在设计过程中，应自顶向下，由粗略到详细，先模糊在构思细节这样进行设计。因为没有粗略，也无法构思详细，就如同画画，只有先把框架搭起来，才能不断完善其细节。如果一上来就构思细节，构思不起来，也不能完成和整体的配合。
3.5 开发 而在开发过程中，应恰恰相反，从下层到上层，自底向上的，像搭积木一样去编写程序，先把最底层的积木写好，再不断在积木上搭建房间，再通过房间达成一座高楼。
编程中，就是先编写最底层的函数，把轮子写出来，在编写中间层函数，它需要调用底层函数。完成底板的开发。最终开发顶层函数，它调用中间层函数，而不应该去调用最底层函数，因为方便后期维护。这样在底板的基础上，搭建出一台汽车。
同样的，底层函数更不应去反过来去调用顶层或中层函数。这样在后期维护，就不会牵一发而动全身。
在VS2019中，首先编写一个.cs文件封装数据结构，然后在一个.cs中按照上述规则编写程序，最终实现了程序的开发。</description>
    </item>
    
    <item>
      <title>C#_03</title>
      <link>https://lijinyu3.github.io/studynotes/csharp_03/</link>
      <pubDate>Sun, 09 Feb 2020 00:05:53 +0800</pubDate>
      
      <guid>https://lijinyu3.github.io/studynotes/csharp_03/</guid>
      <description>[TOC]
 一、C#程序的编写、编译、运行。   打开记事本，编写程序，完成后保存为.cs后缀的文件。(标准编码方式为ASCII)
  打开Developer Command Prompt for VS 2019(开发人员命令提示符)，找到源代码的目录。
 C:可以切换到某盘
dir *.*可以展示当前目录下指定文件
   使用指令
 csc.exe /target:exe XXX.cs
进行编译
type xx.cs
进行查看源代码
   二、编译 编译就将纯文本形式的源代码(HelloWorld.cs)通过编译器Compiler进行翻译，转换成二进制的可执行程序。(.exe)
三、可执行程序 在Windows平台下，可执行程序分为托管程序(C#，运行需要计算机安装有.NET Framework)与非托管程序(C/C++)两种。
3.1 托管程序 .NET程序就是托管(Managed)程序，它必须运行在一个独立的运行环境(CLR=common language runtime=公共语言运行库)，并受到这个环境的管理和控制。就是一台只运行.NET程序的虚拟机(VIrtual Machine)。
.NET应用程序	&amp;lt;&amp;ndash;管理&amp;ndash;	.NET虚拟机(CLR)	&amp;ndash;调用功能&amp;ndash;&amp;gt;	操作系统(Windows)	&amp;ndash;管理&amp;ndash;&amp;gt;	构成计算机的各种硬件
四、.NET程序开发运行全景图 .exe和.dll在.NET中统称为&amp;quot;程序集Assembly&amp;quot;，其中保存的是&amp;rdquo;IL(中间语言)&amp;ldquo;指令。
IL指令交给CLR也就是.NET虚拟机，首先通过类装载器读入IL指令，其次通过JIT编译器进行安全检查，如果通过了检查，就进行编译，这时就生成了本地可以由CPU直接执行的代码，叫作本地代码。最终由CPU执行。</description>
    </item>
    
    <item>
      <title>C#_02</title>
      <link>https://lijinyu3.github.io/studynotes/csharp_02/</link>
      <pubDate>Sat, 08 Feb 2020 02:00:46 +0800</pubDate>
      
      <guid>https://lijinyu3.github.io/studynotes/csharp_02/</guid>
      <description>[TOC]
 一、面向对象程序设计思想  面向对象是一种主流的软件开发与设计方法 当前人们使用的各种软件系统基本都是应用面向对象思想与技术设计和开发出来的 颗粒度加大，开发更容易  二、背景知识 2.1 软件是怎么写出来的？ 面临的问题以及解决方法：
  如何表达信息，从而方便计算机的处理？
答：设计和选用合适的数据结构。
  如何设计与选择特定的算法取处理数据与信息？
答：可选择已有的or设计新的。
算法：分而治之、动态规划。
程序控制结构：分支、循环、递归。
  如何编写程序实现算法？
答：选择合适的技术手段，设计合理的技术方案。
软件系统架构、面向对象的分析与设计、编程语言、开发框架、软件平台等等。
  2.2 程序是如何被计算机执行的  各种信息是如何用0-1表达的 计算机由哪些原件构成，其工作原理是什么 操作系统如何启动一个程序的执行  2.3 如何编写计算机可以执行的程序  编写源代码 编译 得到可运行的  2.4 怎样构造解决问题的算法  分析问题 设计算法 编写程序  三、0和1 3.1 原因 人类使用十进制0~9进行计算，计算机只只使用2个数字0和1。因为两个状态的东西容易找到和制作：开关、黑白、有无。
在计算机中，只需要让高电平表示&amp;quot;1&amp;rdquo;，低电平表示&amp;quot;0&amp;rdquo;，这样计算机元件的制造难度就可以大大下降。相反，如果使用十进制，就需要找到一种区分10种状态的电子元器件，很难。
3.2 如何表达信息 数值信息直接转换到二进制表达。
 10 -&amp;gt; 1010
 非数值信息，采用编码。
 编码就是以若干位二进制码的不同组合来表示非数值类型的信息。具体怎么组合是人为指定的。
  五笔字型的汉字输入法，使用1~4个字符对应一个或多个汉字。 数码图像，可以将其分解成一个一个的像素点，用数字表达它的颜色和位置等信息，然后再把这些数字以特定格式存进文件里，就是图像文件。  3.</description>
    </item>
    
    <item>
      <title>C#_01</title>
      <link>https://lijinyu3.github.io/studynotes/csharp_01/</link>
      <pubDate>Fri, 07 Feb 2020 19:13:27 +0800</pubDate>
      
      <guid>https://lijinyu3.github.io/studynotes/csharp_01/</guid>
      <description>金旭亮老师的C#+.NET的学习笔记
[TOC]
 一、ReadKey与Beep  ReadKey(true)
 可以使用户输入一个字符。当参数为true时，用户的输入会隐藏。
 Beep()
 会使计算机发出一次响声。
二、C#编程规则  标识符（identifier：程序中含有特殊含有的单词，区分大小写） 每句话以分号结尾，多条语句可以用{}合在一起成为语句块。 编写的代码放在类Class中，类是C#的基本单元。 存放C# class的源代码文件拓展名为.cs，一个.cs可以包含多个class。  三、文件组织方式 一个解决方案包Solution含了3个项目Project。
Project是Visual Studio编译的最小单元。
Solution可以包含多个Project。其中加粗的Project是启动项目。
一个Project可以有多个类文件class，class只有在Project中才能被编译。
程序的入口点是Program类的Main()方法</description>
    </item>
    
    <item>
      <title>Win10快捷键笔记</title>
      <link>https://lijinyu3.github.io/studynotes/win10hotkeys/</link>
      <pubDate>Fri, 07 Feb 2020 17:59:14 +0800</pubDate>
      
      <guid>https://lijinyu3.github.io/studynotes/win10hotkeys/</guid>
      <description>这里记录一下Windows10的快捷键。方便后续使用。
 一、快捷键 1.Win键类 Win+L	快速锁屏
Win+E	打开我的电脑
Win+D	进入桌面（相当于右下角的显示桌面）
Win+R	打开运行功能
Win+↑↓←→	对当前窗口分屏/位置改变
Win+Tab	新建电脑桌面
Win+空格	切换多个输入法
Win+I	打开设置
Win+数字	打开任务栏第N个程序
Win+W	打开ink工作区
Win+Q	打开搜索
2.Ctrl键类 Ctrl+Shift+N	快速创建文件夹/无痕窗口
Ctrl+Shift+Del 删除浏览器缓存
Ctrl+N	新建
Ctrl+O	打开文件
Ctrl+A	全选
Ctrl+F/H	查找、替换
Ctrl+鼠标拖动 快速创建副本
Ctrl+N	快速创建同级别界面
Ctrl+Shift+T 恢复删除的网页
Ctrl+Z\Y	撤回\恢复
Ctrl+W	关闭当前文档、网页
3.Shift键类 Shift+Delete 永久删除
Shift+Ctrl+Esc 打开任务管理器
Shift+Win+S	截屏
4.Alt键类 Alt+F4 关闭当前的应用
Alt+Enter/2 Click	快速查看文件属性
Alt+Ctrl+Del	打开安全窗口
Alt+Esc	在没有最小化的窗口间切换
Alt+PrtScn	对当前程序/窗口截屏
5.TAB键类 Tab+Win	时间线切换</description>
    </item>
    
    <item>
      <title>C#_00</title>
      <link>https://lijinyu3.github.io/studynotes/csharp_00/</link>
      <pubDate>Fri, 07 Feb 2020 00:11:18 +0800</pubDate>
      
      <guid>https://lijinyu3.github.io/studynotes/csharp_00/</guid>
      <description>金旭亮老师的C#+.NET的学习笔记
[TOC]
 一、本课程学习内容：C# .NET 本课程将会用到的项目类型：
 Windows窗体程序（.exe 最常用的） 控制台应用程序（多用于学习，平时少） 类库（.dll 提供大厦的砖块）  二、格式输入输出 Console类(控制台 [kənˈsəʊl , ˈkɒnsəʊl])
 格式输入：Console.WriteLine();
格式输出：Console.ReadKey();
 三、控制台方法 与Java一样，静态无返回值的方法就是
static void TestConsoleProperty(){ Console.Title = &amp;#34;Current Time:&amp;#34;+DateTime.Now; Console.ForegroundColor = ConsoleColor.Yellow; Console.BackgroundColor = ConsoleColor.DarkBlue; } 引用方法时的语法是
 TestConsoleProperty();
 其中Console类中的Title、ForegroundColor、BackgroundColor分别是标题、前背景色（字体颜色）、背景色这些属性。
四、输入输出及其参数 Console.Write()方法并不会自动换行，类似于Java的System.out.print()，而WriteLine()就像是println()。
在输出时，涉及到字符串变量与字符串，有两种方法。
  like Java&amp;rsquo;s format:by using the character &amp;lsquo;+&amp;rsquo; to connect a string and a variable.
 Console.WriteLine(&amp;ldquo;Like Java&amp;quot;+string);
   like C&amp;rsquo;s format:通过类似于{数字}的占位符以及后面跟着的参数进行输出。占位符里的数字代表后面的第几个参数。</description>
    </item>
    
    <item>
      <title>Chapter_0</title>
      <link>https://lijinyu3.github.io/readingnotes/c_permer_plus/chapter_0/</link>
      <pubDate>Sun, 02 Feb 2020 00:45:27 +0800</pubDate>
      
      <guid>https://lijinyu3.github.io/readingnotes/c_permer_plus/chapter_0/</guid>
      <description>第一章、初识C语言 Chapter 1. Getting Ready
这一章主要介绍了C语言的起源、设计特点、应用范围。计算机与编程语言的概念。语言标准。C语言开发7步骤。编程机制。
通过这一章的学习，掌握：
 C语言的历史渊源、特点。	C&amp;rsquo;s history and features. 计算机与编程语言、编程机制的概念。 Some concepts of computer,programming languages,compliers and linkers. C标准、C语言开发步骤。 C standards,the steps needed to write programs.   1.1 C语言的起源与特点 Whence C?The features of C. </description>
    </item>
    
    <item>
      <title>对于集中式与分布式的浅显理解</title>
      <link>https://lijinyu3.github.io/git/git/</link>
      <pubDate>Sat, 01 Feb 2020 19:53:53 +0800</pubDate>
      
      <guid>https://lijinyu3.github.io/git/git/</guid>
      <description>因为本博客架构在我的GitHub网站上，在更新Blog时要用到Git进行管理控制上传。故在此开贴记录一下Git的使用与理解。
 一、概念 1.1 版本管理系统的由来 首先Git是目前世界上最先进的分布式 版本控制系统（没有之一）。那么什么是版本控制系统？
就像我在用Word写设计报告论文时，老师总会找出错误让我改报告。每次修改为了保险都会保存上一次的文件，因此就会创建一个当前文件的副本文件作为当前使用的报告。但是改报告并不会一次两次就会修改完，经常会造成这种情况。如图1.1，版本文档示意图。
更麻烦的是，如果有一份报告需要我和组员协同完成。于是我把文件用U盘copy给组员，然后我继续完成我的部分，等着组员完成他的部分然后把Word文档发给我。但当组员把他的文档发过来时，我必须考虑在这段时间内我对这份Word文档作了哪些改动，并把我的改动与他的部分合并。这又涉及到版本回滚了，很麻烦。
这时候如果能有一个软件，可以帮助我记录每次文件的改动情况，还可以让组员协同编辑，这样就把管理版本的任务交给软件了，不需要对这些文件传来传去，改来改去。如果想看某一次改动，只需要看一眼软件的记录，回滚版本也方便了很多。
就像下面的表格一样。
   版本 文件名 用户 说明 日期     1 文档.doc LJY 第一版报告 2020.2.1   2 文档.doc LJY 改变行间距 2020.2.2   3 文档.doc 熊豪 加入哈夫曼编码 2020.2.3    这就是版本管理系统的由来。
1.2 集中式与分布式 Git作为一款优秀的版本管理系统，它是分布式的。那么分布式与集中式的区别与优缺点都是什么。
先说一下集中式的。在集中式版本管理系统中，版本库集中存放在中央服务器，在需要处理文档时，用自己的电脑从中央服务器取得最新的版本，在处理完之后，再commit到中央服务器。在这里，中央服务器就像一个大的图书馆，每次都从图书馆里借一本书，回到家自己改，改完了再交回去。如图1.2，集中式示意图。
而分布式版本控制系统根本没有中央服务器，每个人的电脑上都会clone一份完整的版本库（项目全部文件及版本迭代）。这样在处理文档时并不需要联网，因为版本库就在本机上。但是每个人电脑都有版本库，如果协同工作呢？如果我在电脑上修改了A.word，组员也修改了A.word，那么我们只需要把相互的修改push给对方，就能看到修改的东西了。
这样，可以看出来与集中式相比，分布式安全了不少，即便某个人的版本库坏了，只需要从另一个人那里clone过来就行了。而集中式的如果服务器有问题了，比如宕机，那么大家都不能干活了。
在实际使用时，由于两台电脑可能不在同一局域网下，所以并不能相互访问，也就不能在两人之间的电脑上相互push版本库的修改了。也有可能我的组员有事病了，他的电脑没有开机。因此分布式系统也需要一台充当中央服务器的电脑，但是此服务器并非彼服务器，它的作用仅仅是方便交换大家的修改，没有了它一样可以干活，只是很不方便。
集中式每次干活时只把最新版本pull下来，而分布式在第一次干活时需要把整个repo都clone过来。因此在初始化的时候，集中式只需要很短的时间就能完成，而分布式的需要等一些时间。
其次，在集中式管理时，admin可以通过中央服务器制定每个人的权限范围，便于管理。分布式因为每一台都是一个完整的服务器，并不便于管理。（？不知道能不能指定每个用户可提交的文档权限）
但是这样做的好处也很明显。在Central Server宕机或自己的电脑断网时，集中式如果需要连续修改一些东西，就不能完成。（每次修改必须commit，不然无法记录修改内容）。而分布式在第一种情况可以直接指定另一台电脑作为服务器，在断网时，由于自己有完整的历史库，因此可以单机commit修改内容，在有网的时候pull到中央服务器与别人交换就ok了。
 hugo -b &amp;ldquo;https://lijinyu3.github.io&amp;rdquo; -t hugo-theme-learn -D
git add .
git commit -m &amp;ldquo;12th&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Markdown基本语法</title>
      <link>https://lijinyu3.github.io/studynotes/markdown/</link>
      <pubDate>Sat, 01 Feb 2020 03:50:58 +0800</pubDate>
      
      <guid>https://lijinyu3.github.io/studynotes/markdown/</guid>
      <description>一、摘要 本博客都是用Markdown文件写作的，故写一篇博客存储md语法。
 Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 --摘自百度百科
优点： Markdown是纯文本，只要支持该格式的地方就能获得一样的边际效果。
缺点： 语法要记住的多；有的地方不支持本格式。
 二、基本语法 2.1 标题 # 一级标题 
## 二级标题 
### 三级标题 
#### 四级标题 
##### 五级标题 
###### 最小只有六级标题
2.2 文本样式  加粗：**加粗** 效果：用于加粗字体。 斜体：*斜体* 效果：倾斜字体。 代码引用：&amp;gt;代码引用 效果：(可以嵌套引用)   代码引用
   超链接：[Title](Url) 效果：超链接
  高亮：==高亮== 效果：== 高亮 ==（原版标准不存在）
  列表：* 列表 效果：如上一行所示。
  分割线：--- 效果：
    删除线：~~删除~~ 效果：删除  2.3 其他   图片：!</description>
    </item>
    
    <item>
      <title>Blog</title>
      <link>https://lijinyu3.github.io/studynotes/blog/</link>
      <pubDate>Sat, 01 Feb 2020 01:10:16 +0800</pubDate>
      
      <guid>https://lijinyu3.github.io/studynotes/blog/</guid>
      <description>你好</description>
    </item>
    
    <item>
      <title>各类语言的比较</title>
      <link>https://lijinyu3.github.io/studynotes/test2/</link>
      <pubDate>Thu, 01 Aug 2019 13:30:10 +0800</pubDate>
      
      <guid>https://lijinyu3.github.io/studynotes/test2/</guid>
      <description>各种语言的学习  一、Java语言 Java有一个丰富的生态圈
重要、必学！后端，企业、公司开发的语言。
很好找工作。
Spring全家桶（框架）
 二、C语言 经典。
通信专业、电子
用于嵌入式系统 e.g.单片机
效率很高，接近机器语言。
 三、Python语言 是一种数字分析计算语言
与数字有关的行业
机器学习 Machine Learning
丰富的第三方开源库
爬虫
也可以做Web后端服务
 四、C++语言 C的外延，却与C不是一种语言。
很有设计思想的语言。
难
 五、JavaScript语言 全栈语言
最广泛应用于交互网页。
用于网站前端
也可以用于做后端，得益于node.js
 六、C#语言 语法很像Java
可以做桌面应用
也可以做后端
 七、PHP语言**（世界上最好的语言）** 服务器脚本
可以做后端服务器框架
 八、SQL语言 必学
数据查询
优化它很重要
 九、Objective-C ＆ Swift 开发iOS的
 十、MATLAB 科研语言
商业较少
读研很重要
数学的东西很擅长
十一、Golang语言 Google发布
推荐学习
速度极快！媲美C/C++！
也可以做web后端
Hugo的博客是golang写的。
 十二、Groovy语言 脚本语言
可以与Java语言互相调用。</description>
    </item>
    
    <item>
      <title>你好</title>
      <link>https://lijinyu3.github.io/studynotes/test3/</link>
      <pubDate>Thu, 01 Aug 2019 13:29:56 +0800</pubDate>
      
      <guid>https://lijinyu3.github.io/studynotes/test3/</guid>
      <description>测试一下  过几天要过生日了哈哈哈</description>
    </item>
    
  </channel>
</rss>